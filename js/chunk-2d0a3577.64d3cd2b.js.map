{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/clojure/clojure.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","defaultToken","ignoreCase","tokenPostfix","token","keywords","constants","operators","tokenizer","root","cases","@keywords","@constants","@operators","@default","include","whitespace","strings","multiLineString"],"mappings":"kHAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAKO,IAAAD,GACPE,UACAC,YAAA,MAEAC,WAAA,cAA8B,MAAK,UACnCC,mBACSC,KAAA,IAASC,MAAA,MACTD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MAETC,mBACSF,KAAA,IAASC,MAAA,MACTD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,OAGFN,GACPQ,aAAA,GACAC,YAAA,EACAC,aAAA,OACAP,WACSE,KAAA,IAAAC,MAAA,IAAAK,MAAA,0BACAN,KAAA,IAASC,MAAA,IAAYK,MAAA,oBACrBN,KAAA,IAAAC,MAAA,IAAAK,MAAA,qBAETC,UACA,KACA,WACA,YACA,QACA,KACA,MACA,OACA,WACA,WACA,UACA,UACA,SACA,MACA,QACA,MACA,OACA,SACA,MACA,SACA,SACA,MACA,OACA,SACA,OACA,UACA,UACA,QACA,OACA,aACA,OACA,aACA,MACA,OACA,WACA,KACA,SACA,SACA,QACA,WACA,OACA,OACA,OACA,MACA,QACA,QACA,OACA,OACA,MACA,QACA,OACA,QACA,YACA,OACA,QACA,SACA,UACA,OACA,QACA,WACA,WACA,aACA,KACA,SACA,UACA,OACA,UACA,QACA,UACA,OACA,OACA,MACA,OACA,QACA,UACA,YACA,cACA,SACA,kBACA,cACA,UACA,WACA,MACA,QACA,UACA,MACA,QACA,UACA,OACA,MACA,MACA,QACA,UACA,WACA,SACA,YACA,UACA,UACA,YACA,UACA,UACA,MACA,eACA,MACA,SACA,MACA,OACA,QACA,OACA,QACA,KACA,UACA,SACA,UACA,OAEAC,WAAA,sBACAC,WACA,IACA,OACA,IACA,KACA,IACA,KACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,UACA,SACA,UACA,WAEAC,WACAC,OACA,mCACA,4DAEA,0GACA,gCAGA,mCAEAC,OACAC,YAAA,UACAC,aAAA,WACAC,aAAA,YACAC,WAAA,iBAIA,4CACaC,QAAA,gBACAA,QAAA,aAEbC,aAAA,+BAAkD,YAClDC,UACA,0BACA,uCAEAC,kBACA,wBACA,yBACA,sBACA,mBACA","file":"js/chunk-2d0a3577.64d3cd2b.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: ';;',\r\n    },\r\n    brackets: [['(', ')'], ['{', '}'], ['[', ']']],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n    ],\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    ignoreCase: true,\r\n    tokenPostfix: '.clj',\r\n    brackets: [\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n    ],\r\n    keywords: [\r\n        'ns',\r\n        'ns-unmap',\r\n        'create-ns',\r\n        'in-ns',\r\n        'fn',\r\n        'def',\r\n        'defn',\r\n        'defmacro',\r\n        'defmulti',\r\n        'defonce',\r\n        'require',\r\n        'import',\r\n        'new',\r\n        'refer',\r\n        'pos',\r\n        'pos?',\r\n        'filter',\r\n        'map',\r\n        'reduce',\r\n        'repeat',\r\n        'key',\r\n        'rest',\r\n        'concat',\r\n        'into',\r\n        'reverse',\r\n        'iterate',\r\n        'range',\r\n        'drop',\r\n        'drop-while',\r\n        'take',\r\n        'take-while',\r\n        'neg',\r\n        'neg?',\r\n        'bound-fn',\r\n        'if',\r\n        'if-not',\r\n        'if-let',\r\n        'case,',\r\n        'contains',\r\n        'conj',\r\n        'disj',\r\n        'sort',\r\n        'get',\r\n        'assoc',\r\n        'merge',\r\n        'keys',\r\n        'vals',\r\n        'nth',\r\n        'first',\r\n        'last',\r\n        'count',\r\n        'contains?',\r\n        'cond',\r\n        'condp',\r\n        'cond->',\r\n        'cond->>',\r\n        'when',\r\n        'while',\r\n        'when-not',\r\n        'when-let',\r\n        'when-first',\r\n        'do',\r\n        'future',\r\n        'comment',\r\n        'doto',\r\n        'locking',\r\n        'proxy',\r\n        'println',\r\n        'type',\r\n        'meta',\r\n        'var',\r\n        'as->',\r\n        'reify',\r\n        'deftype',\r\n        'defrecord',\r\n        'defprotocol',\r\n        'extend',\r\n        'extend-protocol',\r\n        'extend-type',\r\n        'specify',\r\n        'specify!',\r\n        'try',\r\n        'catch',\r\n        'finally',\r\n        'let',\r\n        'letfn',\r\n        'binding',\r\n        'loop',\r\n        'for',\r\n        'seq',\r\n        'doseq',\r\n        'dotimes',\r\n        'when-let',\r\n        'if-let',\r\n        'when-some',\r\n        'if-some',\r\n        'this-as',\r\n        'defmethod',\r\n        'testing',\r\n        'deftest',\r\n        'are',\r\n        'use-fixtures',\r\n        'use',\r\n        'remove',\r\n        'run',\r\n        'run*',\r\n        'fresh',\r\n        'alt!',\r\n        'alt!!',\r\n        'go',\r\n        'go-loop',\r\n        'thread',\r\n        'boolean',\r\n        'str',\r\n    ],\r\n    constants: ['true', 'false', 'nil'],\r\n    operators: [\r\n        '=',\r\n        'not=',\r\n        '<',\r\n        '<=',\r\n        '>',\r\n        '>=',\r\n        'and',\r\n        'or',\r\n        'not',\r\n        'inc',\r\n        'dec',\r\n        'max',\r\n        'min',\r\n        'rem',\r\n        'bit-and',\r\n        'bit-or',\r\n        'bit-xor',\r\n        'bit-not',\r\n    ],\r\n    tokenizer: {\r\n        root: [\r\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\r\n            [/[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?/, 'number.float'],\r\n            [\r\n                /(?:\\b(?:(ns|def|defn|defn-|defmacro|defmulti|defonce|ns|ns-unmap|fn))(?![\\w-]))(\\s+)((?:\\w|\\-|\\!|\\?)*)/,\r\n                ['keyword', 'white', 'variable'],\r\n            ],\r\n            [\r\n                /[a-zA-Z_#][a-zA-Z0-9_\\-\\?\\!\\*]*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@constants': 'constant',\r\n                        '@operators': 'operators',\r\n                        '@default': 'identifier',\r\n                    },\r\n                },\r\n            ],\r\n            [/\\/#\"(?:\\.|(?:\\\")|[^\"\"\\n])*\"\\/g/, 'regexp'],\r\n            { include: '@whitespace' },\r\n            { include: '@strings' },\r\n        ],\r\n        whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/;;.*$/, 'comment']],\r\n        strings: [\r\n            [/\"$/, 'string', '@popall'],\r\n            [/\"(?=.)/, 'string', '@multiLineString'],\r\n        ],\r\n        multiLineString: [\r\n            [/\\\\./, 'string.escape'],\r\n            [/\"/, 'string', '@popall'],\r\n            [/.(?=.*\")/, 'string'],\r\n            [/.*\\\\$/, 'string'],\r\n            [/.*$/, 'string', '@popall'],\r\n        ],\r\n    },\r\n};\r\n"],"sourceRoot":""}