{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/markdown/markdown.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","TOKEN_HEADER_LEAD","TOKEN_HEADER","TOKEN_EXT_HEADER","TOKEN_SEPARATOR","TOKEN_QUOTE","TOKEN_LIST","TOKEN_BLOCK","TOKEN_BLOCK_CODE","DELIM_ASSIGN","ATTRIB_NAME","ATTRIB_VALUE","getTag","name","comments","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","control","noncontrol","escapes","jsescapes","empty","tokenizer","root","token","next","nextEmbedded","include","codeblock","codeblockgh","linecontent","html","cases","@empty","@default","comment","tag","switchTo","$S2==style","$S2==script","$S3","embeddedStyle","embeddedScript"],"mappings":"kHAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAKA,IAAAC,EAAA,UACAC,EAAA,UACAC,EAAA,UACAC,EAAA,iBACAC,EAAA,UACAC,EAAA,UACAC,EAAA,SACAC,EAAA,kBACAC,EAAA,iBACAC,EAAA,sBACAC,EAAA,cACA,SAAAC,EAAAC,GACA,YAEO,IAAAd,GACPe,UACAC,cAAA,qBAEAC,WACA,IAAW,MACX,UACA,UAEAC,mBACSC,KAAA,IAASC,MAAA,MACTD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,IAAAC,OAAA,YAETC,mBACSH,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MAETG,SACAC,SACAC,MAAA,IAAAC,OAAA,uCACAC,IAAA,IAAAD,OAAA,6CAIOzB,GACP2B,aAAA,GACAC,aAAA,MAEAC,QAAA,yBACAC,WAAA,0BACAC,QAAA,iBAEAC,UAAA,8CAEAC,OACA,4CACA,oDAEAC,WACAC,OAEA,iDAAuB,QAAAlC,EAAAC,OAEvB,mBAAAC,IAEA,sBAAAC,IAEA,SAAAC,IAEA,yBAAAC,IAEA,sBAAyBC,IAEzB,oCAAkD6B,MAAA7B,EAAA8B,KAAA,gBAElD,mCAAiDD,MAAA7B,EAAA8B,KAAA,eAAAC,aAAA,QAEjD,eAA6BF,MAAA7B,EAAA8B,KAAA,gBAEhBE,QAAA,iBAEbC,YACA,eAA6BJ,MAAA7B,EAAA8B,KAAA,UAC7B,eAA6BD,MAAA7B,EAAA8B,KAAA,UAC7B,MAAA7B,IAGAiC,cACA,WAAyBL,MAAA5B,EAAA6B,KAAA,OAAAC,aAAA,UACzB,QAAA9B,IAEAkC,cAEA,QAAmB,kBACnB,sBAEA,+CACA,iDACA,2BACA,sCACA,oCAEA,YAAuB,kBACvB,iFACA,oDAEaH,QAAA,SAObI,OAEA,YAAA/B,EAAA,QACA,UACAgC,OACAC,UAAmCT,MAAAxB,EAAA,MAAAyB,KAAA,WACnCS,YAAqCV,MAAAxB,EAAA,MAAAyB,KAAA,eAGrC,gBAA8BD,MAAAxB,EAAA,SAC9B,8BAEAmC,UACA,8BACA,yBACA,mCACA,4BAGAC,MACA,uBACA,gCAAAtC,EAAAD,EAAAE,GACqByB,MAAAzB,EAAAsC,SAAA,eACrBtC,KACA,gCAAAD,EAAAD,EAAAE,GACqByB,MAAAzB,EAAAsC,SAAA,eACrBtC,KACA,mCAAAD,EAAAD,EAAAE,KACA,MAAAD,IACA,MAAAE,EAAA,gBACA,KACAgC,OACAM,cAAuCd,MAAAxB,EAAA,OAAAqC,SAAA,gBAAAX,aAAA,YACvCa,eACAP,OACAQ,KAAwChB,MAAAxB,EAAA,OAAAqC,SAAA,iBAAAX,aAAA,OACxCQ,YAA6CV,MAAAxB,EAAA,OAAAqC,SAAA,iBAAAX,aAAA,qBAG7CQ,YAAqCV,MAAAxB,EAAA,OAAAyB,KAAA,YAIrCgB,gBACA,aACA,gBAA8BjB,MAAA,WAAAC,KAAA,OAAAC,aAAA,UAC9B,SAEAgB,iBACA,aACA,iBAA+BlB,MAAA,WAAAC,KAAA,OAAAC,aAAA,UAC/B","file":"js/chunk-2d0c512b.1660f895.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nvar TOKEN_HEADER_LEAD = 'keyword';\r\nvar TOKEN_HEADER = 'keyword';\r\nvar TOKEN_EXT_HEADER = 'keyword';\r\nvar TOKEN_SEPARATOR = 'meta.separator';\r\nvar TOKEN_QUOTE = 'comment';\r\nvar TOKEN_LIST = 'keyword';\r\nvar TOKEN_BLOCK = 'string';\r\nvar TOKEN_BLOCK_CODE = 'variable.source';\r\nvar DELIM_ASSIGN = 'delimiter.html';\r\nvar ATTRIB_NAME = 'attribute.name.html';\r\nvar ATTRIB_VALUE = 'string.html';\r\nfunction getTag(name) {\r\n    return 'tag';\r\n}\r\nexport var conf = {\r\n    comments: {\r\n        blockComment: ['<!--', '-->',]\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>', notIn: ['string'] }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '(', close: ')' },\r\n        { open: '[', close: ']' },\r\n        { open: '`', close: '`' },\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*<!--\\\\s*#?region\\\\b.*-->\"),\r\n            end: new RegExp(\"^\\\\s*<!--\\\\s*#?endregion\\\\b.*-->\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.md',\r\n    // escape codes\r\n    control: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\r\n    noncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\r\n    escapes: /\\\\(?:@control)/,\r\n    // escape codes for javascript/CSS strings\r\n    jsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\r\n    // non matched elements\r\n    empty: [\r\n        'area', 'base', 'basefont', 'br', 'col', 'frame',\r\n        'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'\r\n    ],\r\n    tokenizer: {\r\n        root: [\r\n            // headers (with #)\r\n            [/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, ['white', TOKEN_HEADER_LEAD, TOKEN_HEADER, TOKEN_HEADER]],\r\n            // headers (with =)\r\n            [/^\\s*(=+|\\-+)\\s*$/, TOKEN_EXT_HEADER],\r\n            // headers (with ***)\r\n            [/^\\s*((\\*[ ]?)+)\\s*$/, TOKEN_SEPARATOR],\r\n            // quote\r\n            [/^\\s*>+/, TOKEN_QUOTE],\r\n            // list (starting with * or number)\r\n            [/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, TOKEN_LIST],\r\n            // code block (4 spaces indent)\r\n            [/^(\\t|[ ]{4})[^ ].*$/, TOKEN_BLOCK],\r\n            // code block (3 tilde)\r\n            [/^\\s*~~~\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: TOKEN_BLOCK, next: '@codeblock' }],\r\n            // github style code blocks (with backticks and language)\r\n            [/^\\s*```\\s*((?:\\w|[\\/\\-#])+)\\s*$/, { token: TOKEN_BLOCK, next: '@codeblockgh', nextEmbedded: '$1' }],\r\n            // github style code blocks (with backticks but no language)\r\n            [/^\\s*```\\s*$/, { token: TOKEN_BLOCK, next: '@codeblock' }],\r\n            // markup within lines\r\n            { include: '@linecontent' },\r\n        ],\r\n        codeblock: [\r\n            [/^\\s*~~~\\s*$/, { token: TOKEN_BLOCK, next: '@pop' }],\r\n            [/^\\s*```\\s*$/, { token: TOKEN_BLOCK, next: '@pop' }],\r\n            [/.*$/, TOKEN_BLOCK_CODE],\r\n        ],\r\n        // github style code blocks\r\n        codeblockgh: [\r\n            [/```\\s*$/, { token: TOKEN_BLOCK_CODE, next: '@pop', nextEmbedded: '@pop' }],\r\n            [/[^`]+/, TOKEN_BLOCK_CODE],\r\n        ],\r\n        linecontent: [\r\n            // escapes\r\n            [/&\\w+;/, 'string.escape'],\r\n            [/@escapes/, 'escape'],\r\n            // various markup\r\n            [/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'],\r\n            [/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'],\r\n            [/\\b_[^_]+_\\b/, 'emphasis'],\r\n            [/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'],\r\n            [/`([^\\\\`]|@escapes)+`/, 'variable'],\r\n            // links\r\n            [/\\{[^}]+\\}/, 'string.target'],\r\n            [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']],\r\n            [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'],\r\n            // or html\r\n            { include: 'html' },\r\n        ],\r\n        // Note: it is tempting to rather switch to the real HTML mode instead of building our own here\r\n        // but currently there is a limitation in Monarch that prevents us from doing it: The opening\r\n        // '<' would start the HTML mode, however there is no way to jump 1 character back to let the\r\n        // HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\r\n        // we cannot correctly tokenize it in that mode yet.\r\n        html: [\r\n            // html tags\r\n            [/<(\\w+)\\/>/, getTag('$1')],\r\n            [/<(\\w+)/, {\r\n                    cases: {\r\n                        '@empty': { token: getTag('$1'), next: '@tag.$1' },\r\n                        '@default': { token: getTag('$1'), next: '@tag.$1' }\r\n                    }\r\n                }],\r\n            [/<\\/(\\w+)\\s*>/, { token: getTag('$1') }],\r\n            [/<!--/, 'comment', '@comment']\r\n        ],\r\n        comment: [\r\n            [/[^<\\-]+/, 'comment.content'],\r\n            [/-->/, 'comment', '@pop'],\r\n            [/<!--/, 'comment.content.invalid'],\r\n            [/[<\\-]/, 'comment.content']\r\n        ],\r\n        // Almost full HTML tag matching, complete with embedded scripts & styles\r\n        tag: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/(type)(\\s*=\\s*)(\")([^\"]+)(\")/, [ATTRIB_NAME, DELIM_ASSIGN, ATTRIB_VALUE,\r\n                    { token: ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\r\n                    ATTRIB_VALUE]],\r\n            [/(type)(\\s*=\\s*)(')([^']+)(')/, [ATTRIB_NAME, DELIM_ASSIGN, ATTRIB_VALUE,\r\n                    { token: ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\r\n                    ATTRIB_VALUE]],\r\n            [/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, [ATTRIB_NAME, DELIM_ASSIGN, ATTRIB_VALUE]],\r\n            [/\\w+/, ATTRIB_NAME],\r\n            [/\\/>/, getTag('$S2'), '@pop'],\r\n            [/>/, {\r\n                    cases: {\r\n                        '$S2==style': { token: getTag('$S2'), switchTo: 'embeddedStyle', nextEmbedded: 'text/css' },\r\n                        '$S2==script': {\r\n                            cases: {\r\n                                '$S3': { token: getTag('$S2'), switchTo: 'embeddedScript', nextEmbedded: '$S3' },\r\n                                '@default': { token: getTag('$S2'), switchTo: 'embeddedScript', nextEmbedded: 'text/javascript' }\r\n                            }\r\n                        },\r\n                        '@default': { token: getTag('$S2'), next: '@pop' }\r\n                    }\r\n                }],\r\n        ],\r\n        embeddedStyle: [\r\n            [/[^<]+/, ''],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/</, '']\r\n        ],\r\n        embeddedScript: [\r\n            [/[^<]+/, ''],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/</, '']\r\n        ],\r\n    }\r\n};\r\n"],"sourceRoot":""}